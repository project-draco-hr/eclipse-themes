{
  float[] kernel=create1DKernel(radius,sigma);
  ImageData imgPixels=src.getImageData();
  int width=imgPixels.width;
  int height=imgPixels.height;
  int[] inPixels=new int[width * height];
  int[] outPixels=new int[width * height];
  int offset=0;
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      RGB rgb=imgPixels.palette.getRGB(imgPixels.getPixel(x,y));
      if (rgb.red == 255 && rgb.green == 255 && rgb.blue == 255) {
        inPixels[offset]=(rgb.red << 16) | (rgb.green << 8) | rgb.blue;
      }
 else {
        inPixels[offset]=(imgPixels.getAlpha(x,y) << 24) | (rgb.red << 16) | (rgb.green << 8)| rgb.blue;
      }
      offset++;
    }
  }
  convolve(kernel,inPixels,outPixels,width,height,true);
  convolve(kernel,outPixels,inPixels,height,width,true);
  ImageData dst=new ImageData(imgPixels.width,imgPixels.height,24,new PaletteData(0xff0000,0xff00,0xff));
  dst.setPixels(0,0,inPixels.length,inPixels,0);
  offset=0;
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      if (inPixels[offset] == -1) {
        dst.setAlpha(x,y,0);
      }
 else {
        int a=(inPixels[offset] >> 24) & 0xff;
        dst.setAlpha(x,y,a);
      }
      offset++;
    }
  }
  return dst;
}
