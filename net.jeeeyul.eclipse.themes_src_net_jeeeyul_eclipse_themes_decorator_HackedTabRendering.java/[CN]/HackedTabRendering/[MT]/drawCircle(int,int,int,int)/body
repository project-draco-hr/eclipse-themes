{
  int x=0, y=r, u=1, v=2 * r - 1, e=0;
  int[] points=new int[1024];
  int[] pointsMirror=new int[1024];
  int loop=0;
  int loopMirror=0;
  while (x < y) {
    if (circlePart == RIGHT_BOTTOM) {
      points[loop++]=xC + x;
      points[loop++]=yC + y;
    }
    if (circlePart == RIGHT_TOP) {
      points[loop++]=xC + y;
      points[loop++]=yC - x;
    }
    if (circlePart == LEFT_TOP) {
      points[loop++]=xC - x;
      points[loop++]=yC - y;
    }
    if (circlePart == LEFT_BOTTOM) {
      points[loop++]=xC - y;
      points[loop++]=yC + x;
    }
    x++;
    e+=u;
    u+=2;
    if (v < 2 * e) {
      y--;
      e-=v;
      v-=2;
    }
    if (x > y)     break;
    if (circlePart == RIGHT_BOTTOM) {
      pointsMirror[loopMirror++]=xC + y;
      pointsMirror[loopMirror++]=yC + x;
    }
    if (circlePart == RIGHT_TOP) {
      pointsMirror[loopMirror++]=xC + x;
      pointsMirror[loopMirror++]=yC - y;
    }
    if (circlePart == LEFT_TOP) {
      pointsMirror[loopMirror++]=xC - y;
      pointsMirror[loopMirror++]=yC - x;
    }
    if (circlePart == LEFT_BOTTOM) {
      pointsMirror[loopMirror++]=xC - x;
      pointsMirror[loopMirror++]=yC + y;
    }
    if ((loop + 1) > points.length) {
      int length=points.length * 2;
      int[] newPointTable=new int[length];
      int[] newPointTableMirror=new int[length];
      System.arraycopy(points,0,newPointTable,0,points.length);
      points=newPointTable;
      System.arraycopy(pointsMirror,0,newPointTableMirror,0,pointsMirror.length);
      pointsMirror=newPointTableMirror;
    }
  }
  int[] finalArray=new int[loop + loopMirror];
  System.arraycopy(points,0,finalArray,0,loop);
  for (int i=loopMirror - 1, j=loop; i > 0; i=i - 2, j=j + 2) {
    int tempY=pointsMirror[i];
    int tempX=pointsMirror[i - 1];
    finalArray[j]=tempX;
    finalArray[j + 1]=tempY;
  }
  return finalArray;
}
