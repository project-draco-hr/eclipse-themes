{
  int[] points=new int[1024];
  int index=0;
  int radius=cornerSize / 2;
  int marginWidth=parent.marginWidth;
  int marginHeight=parent.marginHeight;
  int delta=INNER_KEYLINE + OUTER_KEYLINE + 2 * (shadowEnabled ? SIDE_DROP_WIDTH : 0) + 2 * marginWidth;
  int width=bounds.width - delta;
  int height=Math.max(parent.getTabHeight() + INNER_KEYLINE + OUTER_KEYLINE+ (shadowEnabled ? BOTTOM_DROP_WIDTH : 0),bounds.height - INNER_KEYLINE - OUTER_KEYLINE- 2 * marginHeight - (shadowEnabled ? BOTTOM_DROP_WIDTH : 0));
  int circX=bounds.x + delta / 2 + radius;
  int circY=bounds.y + radius;
  index=0;
  int[] ltt=drawCircle(circX,circY,radius,LEFT_TOP);
  System.arraycopy(ltt,0,points,index,ltt.length);
  index+=ltt.length;
  int[] lbb=drawCircle(circX,circY + height - (radius * 2),radius,LEFT_BOTTOM);
  System.arraycopy(lbb,0,points,index,lbb.length);
  index+=lbb.length;
  int[] rb=drawCircle(circX + width - (radius * 2),circY + height - (radius * 2),radius,RIGHT_BOTTOM);
  System.arraycopy(rb,0,points,index,rb.length);
  index+=rb.length;
  int[] rt=drawCircle(circX + width - (radius * 2),circY,radius,RIGHT_TOP);
  System.arraycopy(rt,0,points,index,rt.length);
  index+=rt.length;
  points[index++]=circX;
  points[index++]=circY - radius;
  int[] tempPoints=new int[index];
  System.arraycopy(points,0,tempPoints,0,index);
  gc.fillPolygon(tempPoints);
  Region r=new Region();
  r.add(bounds);
  r.subtract(tempPoints);
  gc.setBackground(parent.getParent().getBackground());
  Display display=parent.getDisplay();
  Region clipping=new Region();
  gc.getClipping(clipping);
  r.intersect(clipping);
  gc.setClipping(r);
  Rectangle mappedBounds=display.map(parent,parent.getParent(),bounds);
  parent.getParent().drawBackground(gc,bounds.x,bounds.y,bounds.width,bounds.height,mappedBounds.x,mappedBounds.y);
  if (shadowEnabled)   drawShadow(display,bounds,gc);
  gc.setClipping(clipping);
  clipping.dispose();
  r.dispose();
  shape=tempPoints;
}
