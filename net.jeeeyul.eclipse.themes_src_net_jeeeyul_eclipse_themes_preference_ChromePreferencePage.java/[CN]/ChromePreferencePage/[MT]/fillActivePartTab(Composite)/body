{
  Group startGroup=new Group(body,SWT.NORMAL);
  startGroup.setText("Start Color");
  startGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
  startGroup.setLayout(new GridLayout(2,false));
  new org.eclipse.swt.widgets.Label(startGroup,SWT.NORMAL).setText("Hue:");
  startHueScale=new HueScale(startGroup,SWT.NORMAL);
  startHueScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  startHueScale.setSelection((int)decorator.getStartHSB()[0]);
  startHueScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      if (isAutomaticEndColor()) {
        computeEndColor();
      }
 else       if (isEndHueSynchronized()) {
        endHueScale.setSelection(startHueScale.getSelection());
      }
      if (autoOutlineColorField.getSelection()) {
        computeOutlineColor();
      }
 else       if (lockOutlineHueField.getSelection()) {
        outlineHueScale.setSelection(startHueScale.getSelection());
      }
      update();
    }
  }
);
  new org.eclipse.swt.widgets.Label(startGroup,SWT.NORMAL).setText("Saturation:");
  startSaturationScale=new Scale(startGroup,SWT.NORMAL);
  startSaturationScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  startSaturationScale.setMinimum(0);
  startSaturationScale.setMaximum(100);
  startSaturationScale.setSelection((int)(decorator.getStartHSB()[1] * 100));
  startSaturationScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      if (isAutomaticEndColor()) {
        computeEndColor();
      }
      if (autoOutlineColorField.getSelection()) {
        computeOutlineColor();
      }
      update();
    }
  }
);
  new org.eclipse.swt.widgets.Label(startGroup,SWT.NORMAL).setText("Brightness:");
  startBrightnessScale=new Scale(startGroup,SWT.NORMAL);
  startBrightnessScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  startBrightnessScale.setMinimum(0);
  startBrightnessScale.setMaximum(100);
  startBrightnessScale.setSelection((int)(decorator.getStartHSB()[2] * 100));
  startBrightnessScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      if (isAutomaticEndColor()) {
        computeEndColor();
      }
      if (autoOutlineColorField.getSelection()) {
        computeOutlineColor();
      }
      update();
    }
  }
);
  Group endGroup=new Group(body,SWT.NORMAL);
  endGroup.setText("End Color");
  endGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,1,1));
  endGroup.setLayout(new GridLayout(2,false));
  autoEndColorField=new Button(endGroup,SWT.CHECK);
  autoEndColorField.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
  autoEndColorField.setText("Choose Automatically");
  autoEndColorField.setSelection(getPreferenceStore().getBoolean(ChromeConstants.CHROME_AUTO_ACTIVE_END_COLOR));
  autoEndColorField.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      updateAuto();
    }
  }
);
  lockEndHueField=new Button(endGroup,SWT.CHECK);
  lockEndHueField.setText("Lock Hue");
  lockEndHueField.setSelection(getPreferenceStore().getBoolean(ChromeConstants.CHROME_LOCK_ACTIVE_END_HUE));
  lockEndHueField.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      updateLock();
    }
  }
);
  lockEndHueField.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
  new org.eclipse.swt.widgets.Label(endGroup,SWT.NORMAL).setText("Hue:");
  endHueScale=new HueScale(endGroup,SWT.NORMAL);
  endHueScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  endHueScale.setSelection((int)decorator.getEndHSB()[0]);
  endHueScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      update();
    }
  }
);
  new org.eclipse.swt.widgets.Label(endGroup,SWT.NORMAL).setText("Saturation:");
  endSaturationScale=new Scale(endGroup,SWT.NORMAL);
  endSaturationScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  endSaturationScale.setMinimum(0);
  endSaturationScale.setMaximum(100);
  endSaturationScale.setSelection((int)(decorator.getEndHSB()[1] * 100));
  endSaturationScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      update();
    }
  }
);
  new org.eclipse.swt.widgets.Label(endGroup,SWT.NORMAL).setText("Brightness:");
  endBrightnessScale=new Scale(endGroup,SWT.NORMAL);
  endBrightnessScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  endBrightnessScale.setMinimum(0);
  endBrightnessScale.setMaximum(100);
  endBrightnessScale.setSelection((int)(decorator.getEndHSB()[2] * 100));
  endBrightnessScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      update();
    }
  }
);
  Group outlineGroup=new Group(body,SWT.NORMAL);
  outlineGroup.setText("Outline");
  outlineGroup.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
  outlineGroup.setLayout(new GridLayout(2,false));
  autoOutlineColorField=new Button(outlineGroup,SWT.CHECK);
  autoOutlineColorField.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
  autoOutlineColorField.setText("Choose Automatically");
  autoOutlineColorField.setSelection(getPreferenceStore().getBoolean(ChromeConstants.CHROME_AUTO_ACTIVE_OUTLINE_COLOR));
  autoOutlineColorField.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      updateAuto();
    }
  }
);
  lockOutlineHueField=new Button(outlineGroup,SWT.CHECK);
  lockOutlineHueField.setText("Lock Hue");
  lockOutlineHueField.setSelection(getPreferenceStore().getBoolean(ChromeConstants.CHROME_LOCK_ACTIVE_OUTLINE_HUE));
  lockOutlineHueField.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      updateLock();
    }
  }
);
  lockOutlineHueField.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
  new org.eclipse.swt.widgets.Label(outlineGroup,SWT.NORMAL).setText("Hue:");
  outlineHueScale=new HueScale(outlineGroup,SWT.NORMAL);
  outlineHueScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  outlineHueScale.setSelection(getPreferenceStore().getFloat(ChromeConstants.CHROME_ACTIVE_OUTLINE_HUE));
  outlineHueScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      update();
    }
  }
);
  new org.eclipse.swt.widgets.Label(outlineGroup,SWT.NORMAL).setText("Saturation:");
  outlineSaturationScale=new Scale(outlineGroup,SWT.NORMAL);
  outlineSaturationScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  outlineSaturationScale.setMinimum(0);
  outlineSaturationScale.setMaximum(100);
  outlineSaturationScale.setSelection((int)(getPreferenceStore().getFloat(ChromeConstants.CHROME_ACTIVE_OUTLINE_SATURATION) * 100));
  outlineSaturationScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      update();
    }
  }
);
  new org.eclipse.swt.widgets.Label(outlineGroup,SWT.NORMAL).setText("Brightness:");
  outlineBrightnessScale=new Scale(outlineGroup,SWT.NORMAL);
  outlineBrightnessScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  outlineBrightnessScale.setMinimum(0);
  outlineBrightnessScale.setMaximum(100);
  outlineBrightnessScale.setSelection((int)(getPreferenceStore().getFloat(ChromeConstants.CHROME_ACTIVE_OUTLINE_BRIGHTNESS) * 100));
  outlineBrightnessScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      update();
    }
  }
);
  updateLock();
  updateAuto();
}
