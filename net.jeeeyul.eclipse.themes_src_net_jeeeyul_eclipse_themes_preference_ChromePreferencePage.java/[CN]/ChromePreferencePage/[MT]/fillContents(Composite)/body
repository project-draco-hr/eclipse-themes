{
  Group startGroup=new Group(body,SWT.NORMAL);
  startGroup.setText("Start Color");
  startGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  startGroup.setLayout(new GridLayout(2,false));
  new org.eclipse.swt.widgets.Label(startGroup,SWT.NORMAL).setText("Hue:");
  startHueScale=new HueScale(startGroup,SWT.NORMAL);
  startHueScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  startHueScale.setSelection((int)decorator.getStartHSB()[0]);
  startHueScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      if (isAutomaticEndColor()) {
        computeEndColor();
      }
 else       if (isHueSynchronized()) {
        endHueScale.setSelection(startHueScale.getSelection());
      }
      update();
    }
  }
);
  new org.eclipse.swt.widgets.Label(startGroup,SWT.NORMAL).setText("Saturation:");
  startSaturationScale=new Scale(startGroup,SWT.NORMAL);
  startSaturationScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  startSaturationScale.setMinimum(0);
  startSaturationScale.setMaximum(100);
  startSaturationScale.setSelection((int)(decorator.getStartHSB()[1] * 100));
  startSaturationScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      if (isAutomaticEndColor()) {
        computeEndColor();
      }
      update();
    }
  }
);
  new org.eclipse.swt.widgets.Label(startGroup,SWT.NORMAL).setText("Brightness:");
  startBrightnessScale=new Scale(startGroup,SWT.NORMAL);
  startBrightnessScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  startBrightnessScale.setMinimum(0);
  startBrightnessScale.setMaximum(100);
  startBrightnessScale.setSelection((int)(decorator.getStartHSB()[2] * 100));
  startBrightnessScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      if (isAutomaticEndColor()) {
        computeEndColor();
      }
      update();
    }
  }
);
  Group endGroup=new Group(body,SWT.NORMAL);
  endGroup.setText("End Color");
  endGroup.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  endGroup.setLayout(new GridLayout(2,false));
  autoEndColorField=new Button(endGroup,SWT.CHECK);
  autoEndColorField.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
  autoEndColorField.setText("Choose Automatically");
  autoEndColorField.setSelection(getPreferenceStore().getBoolean("chrome-auto-end-color"));
  autoEndColorField.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      updateAuto();
    }
  }
);
  lockHueField=new Button(endGroup,SWT.CHECK);
  lockHueField.setText("Lock Hue");
  lockHueField.setSelection(getPreferenceStore().getBoolean("chrome-lock-hue"));
  lockHueField.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      updateLock();
    }
  }
);
  lockHueField.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false,2,1));
  new org.eclipse.swt.widgets.Label(endGroup,SWT.NORMAL).setText("Hue:");
  endHueScale=new HueScale(endGroup,SWT.NORMAL);
  endHueScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  endHueScale.setSelection((int)decorator.getEndHSB()[0]);
  endHueScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      update();
    }
  }
);
  new org.eclipse.swt.widgets.Label(endGroup,SWT.NORMAL).setText("Saturation:");
  endSaturationScale=new Scale(endGroup,SWT.NORMAL);
  endSaturationScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  endSaturationScale.setMinimum(0);
  endSaturationScale.setMaximum(100);
  endSaturationScale.setSelection((int)(decorator.getEndHSB()[1] * 100));
  endSaturationScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      update();
    }
  }
);
  new org.eclipse.swt.widgets.Label(endGroup,SWT.NORMAL).setText("Brightness:");
  endBrightnessScale=new Scale(endGroup,SWT.NORMAL);
  endBrightnessScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  endBrightnessScale.setMinimum(0);
  endBrightnessScale.setMaximum(100);
  endBrightnessScale.setSelection((int)(decorator.getEndHSB()[2] * 100));
  endBrightnessScale.addListener(SWT.Selection,new Listener(){
    @Override public void handleEvent(    Event event){
      update();
    }
  }
);
  updateLock();
  updateAuto();
}
