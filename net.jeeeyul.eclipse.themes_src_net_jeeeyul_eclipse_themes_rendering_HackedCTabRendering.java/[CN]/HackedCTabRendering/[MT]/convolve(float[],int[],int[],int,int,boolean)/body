{
  int kernelWidth=kernel.length;
  int kernelMid=kernelWidth / 2;
  for (int y=0; y < height; y++) {
    int index=y;
    int currentLine=y * width;
    for (int x=0; x < width; x++) {
      float a=0, r=0, g=0, b=0;
      for (int k=-kernelMid; k <= kernelMid; k++) {
        float val=kernel[k + kernelMid];
        int xcoord=x + k;
        if (xcoord < 0)         xcoord=0;
        if (xcoord >= width)         xcoord=width - 1;
        int pixel=inPixels[currentLine + xcoord];
        a+=val * ((pixel >> 24) & 0xff);
        r+=val * (((pixel >> 16) & 0xff));
        g+=val * (((pixel >> 8) & 0xff));
        b+=val * (((pixel) & 0xff));
      }
      int ia=alpha ? clamp((int)(a + 0.5)) : 0xff;
      int ir=clamp((int)(r + 0.5));
      int ig=clamp((int)(g + 0.5));
      int ib=clamp((int)(b + 0.5));
      outPixels[index]=(ia << 24) | (ir << 16) | (ig << 8)| ib;
      index+=height;
    }
  }
}
